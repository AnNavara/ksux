'use strict';// ===============================================================// Task list:// gulp           - default, runs development tasks// gulp html      - to compile html// gulp css       - to compile scss// gulp ngrok     - to host opened local web server through tunnel// gulp psi       - to test website speed at pagespeed insight// gulp minimize  - to minimize css// ===============================================================var gulp = require('gulp'),    rename = require('gulp-rename'),    exit = require('gulp-exit'),    sequence = require('run-sequence'),    sourcemaps = require('gulp-sourcemaps'),    gulpIf = require('gulp-if'),    u = require('gulp-util'),    log = u.log,    c = u.colors;var connect = require('gulp-connect'),    livereload = require('gulp-livereload');var sass = require('gulp-sass'),    csscomb = require('gulp-csscomb'),    postcss = require('gulp-postcss'),    cssnano = require('cssnano'),    critical = require('critical'),    autoprefixer = require('autoprefixer'),    postcssZIndex = require('postcss-zindex'),    postcssMQPacker = require('css-mqpacker'),    postcssDIU = require('doiuse'),    postcssReporter = require('postcss-reporter');var fileInclude = require('gulp-file-include'),    removeEmptyLines = require('gulp-remove-empty-lines');var imageMin = require('gulp-imagemin');var psi = require('psi'),    ngrok = require('ngrok'),    portVal = 8001,    site = '';const isDevelopment = !process.env.NODE_ENV || process.env.NODE_ENV == 'development';// ============================================================// Default task to compile html from parts at /source/_html_inc// includes connect.reload to support autoreload// ============================================================gulp.task('html', function() {  gulp.src(['./source/*.html'])    .pipe(fileInclude({      prefix: '@@',      basepath: '@file'    }))    .pipe(removeEmptyLines())    .pipe(gulp.dest('./build/'))    .pipe(connect.reload());});// =========================================================// Default task to compile scss files to css// also uses post processors to rebase Z indexes// automaticly add prefixes for styles for selected browsers// report which styles is not supported by selected browsers// and combine media queries// ! run with parameter NODE_ENV=production e.g.// ! NODE_ENV=production gulp css// ! to turn off source map// =========================================================gulp.task('css', function () {  var processors = [        postcssZIndex,        autoprefixer({browsers: ['last 3 version', 'ie 9', '> 2%']}),        postcssDIU({          browsers: [            'last 3 version',            'ie 9',            '> 2%'          ],          ignore: [            'rem',            'text-size-adjust',            '-webkit-appearance',            'multicolumn',            'css-appearance',            'outline',            'transforms2d',            'border-radius',            'css-transitions',            'font-unicode-range',            'fontface'          ]        }),        postcssMQPacker      ];  return gulp.src('./source/scss/style.scss')    .pipe(gulpIf(isDevelopment, sourcemaps.init()))    .pipe(sass().on('error', sass.logError))    .pipe(postcss(processors))    .pipe(csscomb())    .pipe(rename('style.css'))    .pipe(gulpIf(isDevelopment, sourcemaps.write()))    .pipe(gulp.dest('./build/css/'))    .pipe(connect.reload());});// =======================================// Generate critical css with 900px height// and inline it in html file head// =======================================gulp.task('critical', function (cb) {  critical.generate({    inline: true,    base: './build',    src: 'index.html',    minify: true,    css: ['build/css/style.min.css'],    width: 1300,    height: 900,    dest: 'build/index.html',    extract: false,    ignore: ['font-face']  });});// =================================================// this one task just minize css at build folder// and removes all comments in prepare to production// =================================================gulp.task('min', function () {  var minification = [        cssnano({          autoprefixer: false,          discardComments: {removeAll: true},          zindex: false        })      ];  return gulp.src('./build/css/style.css')    .pipe(postcss(minification))    .pipe(rename('style.min.css'))    .pipe(gulp.dest('./build/css/'))});// =================================================// Task to prepare imgs to web// reduces size of it and put them into build folder// =================================================gulp.task('img', function () {  return gulp.src('./source/_img/*')    .pipe(imageMin({      progressive: true,      optimizationLevel: 3,      multipas: true,      svgoPlugins: [        {removeViewBox: false}      ]    }))    .pipe(gulp.dest('./build/img/'))});//=====================================================// Production task// Clean folders build and production// Runs default tasks to build project then based on it// Minifyes css and adds critical css// also concat js files//// gulp.task('production' [])// ==============================================// Task to host your website through ngrok tunnel// website will visible from outside at// require 'connect' task working at background// to start tunneling// ==============================================gulp.task('ngrok', function (cb) {  return ngrok.connect(portVal, function (err, url) {    site = url;    if (err){ log(c.cyan('ngrok'), c.red(err)); }    log(c.cyan('✔︎ ngrok'),'- serving your site from: ' + c.yellow(url));    cb();  });});// ======================================================// Tasks to test your website at google pagespeed insight// ======================================================gulp.task('psi-desktop', function () {  return psi.output(site, {    nokey: 'true',    strategy: 'desktop',    threshold: 80,  });});gulp.task('psi-mobile', function () {  return psi.output(site, {    nokey: 'true',    strategy: 'mobile',    threshold: 70  });});// ===============================================// This task run in sequence ngrok and psi to test// current local project// ===============================================gulp.task('psi-seq', function (cb) {  return sequence(    'ngrok',    'psi-desktop',    'psi-mobile',    cb  );});gulp.task('psi', ['psi-seq'], function () {  process.exit();});// ============================================================// there would be js concat and uglify but project is too small// ============================================================// gulp.task('js' function() {//// });// =============================================================// connect task to host current project at your local web server// =============================================================gulp.task('connect', function () {  connect.server({    root: 'build',    port: portVal,    livereload: true  });});// ==================================================================// watch task is looking at changed files and run tasks based on that// ==================================================================gulp.task('watch', function () {  gulp.watch('source/scss/**/*.scss', ['css'])  gulp.watch('source/**/*.html', ['html'])  // gulp.watch('source/js/**/*.js', ['javascript'])})// =========================================// default one is just starts selected tasks// =========================================gulp.task('default', ['connect', 'html', 'css', 'watch']);